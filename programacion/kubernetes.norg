- *Entornos locales(gratuitos)* = Docker Desktop, Minikube, Kind, Microk8s, K3s, K3d
- *Operadores* = Kubeadm, Kops
- *Infraestructura como codigo* = Terraform, Ansible
- *Laboratorios en la nube* = Play with Kubernets PWK, Katacoda

* *Que es un cluster?* 

  Un cluster es un grupo de maquinas llamados nodos con  aplicaciones encapsuladas en contenedores en funcionamiento

* *Que es los control-plane?* 
 
  Son los nodos en kubernetes que tiene la responsabilidad de coordinar las actividades del cluster(Para garantizar la alta disponibilidad lo recomendado es tener 3 maquinas con la configuracion en el cluster)

** *Componentes control-plane* 

*** _kube-apiserver_ -> expone la API de kubernetes(es la interfaz de comunicacion para acceder al plano control)
    {https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/}

*** _etcd_ -> Almacenamiento de llave valor, sirve para almacenar toda la informacion del cluster
    {https://etcd.io/docs/v3.5/}

*** _kube_scheduler_ -> tambien conocido como "Planificador" su responsabilidad es asignar un Pods a un nodo existente
    {https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler/}

*** _kube_controler_manager_ -> tiene diferentes controladores que componen el binario
    {https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/}

      - Node controller : Responsable de notificar y responder cuando un nodo deja de funcionar
      - Replication controller : Responable de mantener el numero correcto de Pods para cada una de las replicas 
      - Endpoints controller : Enlaza pods con los servicios
      - Service Accounts & Token controller : Responsable de crear las cuentas predeterminadas y los tokens de acceso en los nuevos namespace

** *Componenetes nodo*

*** _kube proxy_ -> gestiona las reglas de redes y esta presente en todos los nodos del cluster, su objetivo es proporcionar una buena comunicacion entre nodos 
    {https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/}

*** _kubelet_ -> su mision es garantizar que cada contenedor este funcionando dentro de un Pod 
    {https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/}

*** Container Runtime -> componente del software responsable de ejecutar los contenedores, se suelen usar containerd, cri-o 
    {https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md}

** *Complementos en kubernetes*

*** DNS -> comple(CoreDNS) su funcion dentro del cluster es gestionar los registros de los servicios asi como la deteccion y descubrimiento de los mismos 

*** _Conexiones y Politicas de redes_ -> comple(Calico, Flannel, Cilium) complementos que garantizan y gestionan las politicas de redes


* *Objetos en Kubernetes*

   Son las entidades que persisten en el sistema, especificamente en el componente /etcd/ (los mas utilizados son Pods, Deployments, ConfigMaps y Secrets), cada objeto representa un estado en /kubernetes/. Para crear modificar o eliminar objetos tiene que utilizarse la API de kubernetes 

** *Spec y Status* 

   Cada objeto en kubernetes esta compuesto por dos campos anidados, donde cada uno es otro objeto

*** Spec -> describe las caracteristicas del estado deseado y proporcionado desde el cliente 

*** Status -> representa el estado actual dentro del cluster y es actualizado por el sistema

** *Comandos desde kubectl*
 
*** Gestion Declarativa -> 
    La forma recomendada de gestionar los recursos es a traves de los ficheros declarativos llamados 'Resource Config' y del commando /*apply*/ ej: 
    
    /*kubectl apply -f nombre-del-fichero.yml*/ 
    
    `siempre que creemos un objeto a traves de un archivo YML existen cuatro elementos que no pueden faltar`

    `- apiVersion -> Especifica la version de Kubernet4es utilizada para crear el objeto`
    `- Kind -> Tipo de objetos que se desea crear`
    `- metadata -> Informacion para identificar d eforma unica el objeto`
    `- spec -> Descripcion del estado que se desea que obtenga el objeto dentro del cluster`

*** Gestion Imperativa -> 
    Indica la accion que debe realizarse en cada comando ej:
    
    /*kubectl create deployment "deployment name"*/ (para crear un objeto)
    
    /*kubectl delete pod "pod name"*/ (para borrar un objeto Pod)

    /*kubectl set resource deployment "deployment-name"*/ (para asignar recursos a un objeto Deployment)

*** Impresion de Estados -> 
    Muestra el estado y la descripcion del objeto, mostrar campos especificos de un objeto, realizar consultas a los objetos en base a etiquetas

*** Interaccion con contenedores -> 
    permite depurar los procesos en ejecucion dentro del cluster y para ello cuenta con comandos para: 

    - Imprimir los logs de los contenedores 
    - Imprimir los eventos realizados en el cluster 
    - Acceder al contenedor par aefectuar comandos 
    - Copiar ficheros desde la maquina local hacia el contenedor

*** Gestion del Cluster ->
    Son comandos que nos ayudan a realizar operaciones de mantenimiento en el cluster como por ejemplo: /*drain*/, /*uncordon*/, /*cordon*/, entre otros.

*** Tipos de objetos Disponibles -> 
    Siempre que necesitemos tener informacion asociada a los tiops de objetos, sus alias, y grupo al que pertenece, podemos utilizar el comando /*api-resources*/

    /*kubectl api-resource*/ (nos muestra la informacion de los objetos que tenemos)












* *_COMANDOS_*

** *kubectl get pods --namespace kube-system --field-selector spec.nodeName=book-control-plane*

** *kubectl get pods --namespace kube-system --field-selector spec.nodeName=book-worker*



